name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

env:
  JAVA_VERSION: '11'
  JAVA_DISTRO: 'temurin'

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Check Scala formatting
        run: ./gradlew checkScalafmtAll

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: format-check
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test

      - name: Run integration tests
        run: ./gradlew integrationTest

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: 'build/test-results/**/*.xml'
          reporter: java-junit

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [format-check, test]
    environment: prod
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Extract version from tag
        id: extract_version
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            echo "Invalid version format"
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${VERSION}"

      - name: Update version in build.gradle
        run: |
          sed -i "s/version = '1.0'/version = '${VERSION}'/" build.gradle
          echo "Updated version in build.gradle:"
          grep "version = " build.gradle

      - name: Generate changelog
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew jreleaserChangelog

      - name: Stage release
        run: ./gradlew publishStaging

      - name: Release with JReleaser
        env:
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew jreleaserFullRelease --info --stacktrace

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-logs
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: release-artifacts
          path: |
            build/libs/
            build/staging-deploy/ 