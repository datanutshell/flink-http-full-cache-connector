name: Develop Branch

on:
  push:
    branches: [ develop ]

permissions:
  contents: read
  checks: write

env:
  JAVA_VERSION: '11'
  JAVA_DISTRO: 'temurin'

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Check Scala formatting
        run: ./gradlew checkScalafmtAll

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: format-check
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test

      - name: Run integration tests
        run: ./gradlew integrationTest

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: 'build/test-results/**/*.xml'
          reporter: java-junit

  publish-snapshot:
    name: Publish Snapshot
    runs-on: ubuntu-latest
    needs: [format-check, test]
    environment: snapshots
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set snapshot version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          SNAPSHOT_VERSION="1.0-${TIMESTAMP}-${COMMIT_SHORT}-SNAPSHOT"
          echo "SNAPSHOT_VERSION=${SNAPSHOT_VERSION}" >> $GITHUB_ENV
          echo "Setting version to: ${SNAPSHOT_VERSION}"
          
      - name: Update version in build.gradle
        run: |
          sed -i "s/version = '1.0'/version = '${SNAPSHOT_VERSION}'/" build.gradle
          echo "Updated version in build.gradle:"
          grep "version = " build.gradle

      - name: Build and publish snapshot
        env:
          SONATYPE_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Publishing snapshot version: ${SNAPSHOT_VERSION}"
          ./gradlew publishSnapshot --info

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snapshot-artifacts
          path: |
            build/libs/
            build/staging-deploy/ 